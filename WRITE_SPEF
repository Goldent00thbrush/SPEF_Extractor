#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
using namespace std;
void write(string filename);
void readfromDEF();
class map{      //map to keep track of ports
    struct single{
        int num;
        string name;
    };
    single *m;
    int count=0,pn=0;
public:
    map(){
        m=new single [200];
    }
    void add(string s){
        pn++;
        m[count].num=pn;
        m[count].name=s;
        count++;
    }
    int search(string s){
        for (int i=0;i<200;i++)
            if (m[i].name==s) return m[i].num;
        return -1;
    }
};

int main()
{
    cout << "Hello World!" << endl;
    readfromDEF();
    write("D://College//Semester 10-- Spring 2019//CSCE3304 - Digital Design II//Assignments//pro2//untitled//wav.spef");
    for (int i = 0; i < 14; i++)
        {
            cout << pins[i].name <<" ";
            cout << pins[i].direction<<" ";
            cout << pins[i].pin_state << " ";
            cout << pins[i].firstcoordinate <<" ";
            cout << pins[i].secondcoordinate<<" ";
            cout << endl;
        }
    return 0;
}
void write(string filename)
{
    ofstream ofile;
    ofile.open (filename,ios::binary | ios::in);

        if (ofile.is_open()){
            ofile.clear();

            string str;
            int len;
            /*  Header Section begin  */
            str="*SPEF \"IEEE 1481-2009\"\n"; //Spef version
             len=str.length();
            ofile.write(str.c_str(),len);
            str="*DESIGN \"Sample\"\n"; //design name
             len=str.length();
            ofile.write(str.c_str(),len);
            str="*DATE \""; //date
            len=str.length();
            ofile.write(str.c_str(),len);
            auto t = std::time(nullptr);
             auto tm = *std::localtime(&t);
           std::ostringstream oss;
            oss << put_time(&tm, "%d-%m-%Y");
             auto sr = oss.str();
             len=sr.length();
             ofile.write(sr.c_str(),len);
             ofile.write("\"\n",2);
             str="*VENDOR \"Sample Tool\"\n"; //
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*PROGRAM \"Sample Generator\"\n"; //RC EXtrcation tool
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*VERSION \"1.1.0\"\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*DESIGN_FLOW \"Sample Flow\"\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*DIVIDER /\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*DELIMITER :\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*BUS_DELIMITER < >\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*T_UNIT 1 NS\n"; //time units
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*C_UNIT 1 PF\n";  //capcaitence units
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*R_UNIT 1 OHM\n"; //resistence units
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*L_UNIT 1 HENRY\n"; //inductence units
              len=str.length();
             ofile.write(str.c_str(),len);
             /* Header Section end  */

             /* Nmap Section begin */
             map m;
             str="\n*NAME_MAP\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             for (int i=0;i<14;i++)
             {
                 m.add(pins[i].name);
                 str="*"+to_string(m.search(pins[i].name))+" "+pins[i].name+"\n";
                 len=str.length();
                 ofile.write(str.c_str(),len);
             }
             /* Nmap Section end */

             /* Ports Section begin */
             str="\n*PORTS\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             /* Ports Section end */

             /* detailed net Section begin */ //repeat based on number of nets
             str="\n*D_NET\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*CONN\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*CAP\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*RES\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             str="*END\n";
              len=str.length();
             ofile.write(str.c_str(),len);
             /* detailed net Section end */

       }
        else {
            cout<<"unable to open output file"<<endl;
        }
    ofile.close();
}

